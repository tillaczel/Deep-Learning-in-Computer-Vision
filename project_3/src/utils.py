import wandb
import os
import torch
import numpy as np
from tqdm import tqdm

def download_file(run_id, filename):
    api = wandb.Api()
    run = api.run(f"dlcv/p3/{run_id}")
    files = run.files()
    for file in files:
        if file.name == filename:
            file.download(replace=True)
            return
    raise RuntimeError(f"File {filename} not found in dlcv/p3/{run_id}")


def get_state_from_checkpoint(run_id, filename="model.ckpt", replace=True):
    if not os.path.isfile(filename) or replace:
        download_file(run_id, filename)
    chpt = torch.load(filename, map_location=torch.device('cpu'))
    return chpt['state_dict']


#https://github.com/Adi-iitd/AI-Art/blob/master/src/CycleGAN/CycleGAN-PL.py
class ImagePool:

    """
    This class implements an image buffer that stores previously generated images! This buffer enables to update
    discriminators using a history of generated image rather than the latest ones produced by generator.
    """

    def __init__(self, pool_sz: int = 50):

        """
        Parameters:
            pool_sz: Size of the image buffer
        """

        self.nb_images = 0
        self.image_pool = []
        self.pool_sz = pool_sz
    def push_and_pop(self, images):
        """
        Parameters:
            images: latest images generated by the generator
        Returns a batch of images from pool!
        """

        images_to_return = []
        for image in images:
            image = torch.unsqueeze(image, 0)

            if self.nb_images < self.pool_sz:
                self.image_pool.append(image)
                images_to_return.append(image)
                self.nb_images += 1
            else:
                if np.random.uniform(0, 1) > 0.5:

                    rand_int = np.random.randint(0, self.pool_sz)
                    temp_img = self.image_pool[rand_int].clone()
                    self.image_pool[rand_int] = image
                    images_to_return.append(temp_img)
                else:
                    images_to_return.append(image)

        return torch.cat(images_to_return, 0)

